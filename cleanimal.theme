<?php

/**
 * @file
 * Theme function.
 */

use Drupal\Component\Utility\Html;
use Drupal\Core\Entity\Entity\EntityFormDisplay;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements theme_theme_suggestions_alter().
 */
function cleanimal_theme_suggestions_alter(array &$suggestions, array $variables, $hook) {
  // @see https://www.drupal.org/forum/support/post-installation/2015-10-31/drupal-8-node-edit-template
  if ($hook == 'node_edit_form') {
    if ($node = \Drupal::routeMatch()->getParameter('node')) {
      $content_type = $node->bundle();
    }
    else {
      $current_path = \Drupal::service('path.current')->getPath();
      $path_args = explode('/', $current_path);
      $content_type = $path_args[3];
    }
    $suggestions[] = 'node_edit_form__' . $content_type;
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function cleanimal_theme_suggestions_container_alter(array &$suggestions, array $variables) {
  $element = $variables['element'];
  if (array_key_exists('#id', $element)) {
    $id = $element['#id'];

    // Structure actions inside a fieldset.
    if (strpos($id, 'edit-views-bulk-operations-bulk-form') !== FALSE) {
      $suggestions[] = 'container__edit_views_bulk';
    }
  }
}

/**
 * Implements hook_theme().
 */
function cleanimal_theme($existing, $type, $theme, $path) {
  return [
    'user_edit_form' => [
      'render element' => 'form',
    ],
  ];
}

/**
 * Implements hook_preprocess_html().
 */
function cleanimal_preprocess_html(&$variables) {
  // Get route.
  $route_name = \Drupal::routeMatch()->getRouteName();

  // Add route name as class.
  $variables['attributes']['class'][] = Html::cleanCssIdentifier(str_replace('.', '-', $route_name));

  // Add class for all node edit and add form pages.
  if ($route_name == 'node.add' || $route_name == 'entity.node.edit_form') {
    $variables['attributes']['class'][] = 'node-add-edit';
  }
}

/**
 * Implements hook_preprocess().
 */
function cleanimal_preprocess_block(&$variables) {
  // Add a class for identification to local_actions block.
  if ($variables['plugin_id'] === 'local_actions_block') {
    $variables['attributes']['class'][] = Html::getClass('block-' . $variables['plugin_id']);
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function cleanimal_form_user_form_alter(&$form, FormStateInterface $form_state) {
  $form['#theme'] = ['user_edit_form'];
  $form['#attributes']['class'][] = 'layout-node-form';
  $form['#attributes']['class'][] = 'clearfix';
}

/**
 * Implements theme_form_alter().
 */
function cleanimal_form_alter(&$form, &$form_state, $form_id) {
  /*
   * Add the scroll navigation to forms.
   *
   * @todo: This is not usable as published theme. We need to find a easy
   * condition for determining the use of scroll navigation.
   */
  $form_ids_scroll_navigation = ['node_buch_form', 'node_artikel_form', 'user_form', 'node_institution_form', 'node_personen_form', 'node_personen_edit_form'];
  // Build and add the scroll navigation.
  if ((strpos($form_id, 'node_') !== FALSE || strpos($form_id, 'user_') !== FALSE)
    && $form_id !== 'node_type_edit_form'
    && $form_id !== 'node_type_add_form'
    && (strpos($form_id, '_edit_form') !== FALSE || strpos($form_id, '_add_form') !== FALSE || in_array($form_id, $form_ids_scroll_navigation))) {
    $entity = $form_state->getFormObject()->getEntity();
    // TODO: Throws error when creating a new content type.
    $form_display = EntityFormDisplay::collectRenderDisplay($entity, 'default');
    $field_groups = $form_display->getThirdPartySettings('field_group');
    $base_group = str_replace(['node_', '_edit_form', '_add_form', '_form'], [''], $form_id);

    $form['#attributes']['class'][] = 'node-edit-' . $entity->id();

    $scroll_navigation = '<ul>';

    for ($i = 0; $i < count($field_groups['group_' . $base_group]['children']); $i++) {
      $child = $field_groups['group_' . $base_group]['children'][$i];

      if (strpos($child, 'group_') !== FALSE) {
        $scroll_navigation .= <<<EOT
          <li>
            <a href="#{$field_groups[$field_groups['group_' . $base_group]['children'][$i]]['format_settings']['id']}">
              {$field_groups[$field_groups['group_' . $base_group]['children'][$i]]['label']}
            </a>
          </li>
EOT;
      }
    }

    $scroll_navigation .= '</ul>';

    $form['cleanimal_scroll_navigation']['#markup'] = $scroll_navigation;

    $form['#attached']['library'][] = 'cleanimal/scroll_navigation';
  }
}

/**
 * Implements theme_preprocess_form_element().
 */
function cleanimal_preprocess_form_element(&$variables) {
  // TODO: Checkbox logic.
  $element = $variables['element'];
  if (isset($element["#id"])) {
    if (
      $element["#type"] === 'checkbox' &&
      isset($element["#id"]) &&
      strpos($element["#id"], 'edit-node-bulk-form') !== FALSE ||
      strpos($element["#id"], 'edit-media-library-select-form') !== FALSE ||
      strpos($element["#id"], 'edit-commerce-product-bulk-form') !== FALSE
    ) {
      $variables['label_display'] = 'after';
    }
  }
}
