<?php

/**
 * @file
 * Theme function.
 */

use Drupal\Component\Utility\Html;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements theme_theme_suggestions_alter().
 */
function cleanimal_theme_suggestions_alter(array &$suggestions, array $variables, $hook) {
  // @see https://www.drupal.org/forum/support/post-installation/2015-10-31/drupal-8-node-edit-template
  if ($hook == 'node_edit_form') {
    if ($node = \Drupal::routeMatch()->getParameter('node')) {
      $content_type = $node->bundle();
    }
    else {
      $current_path = \Drupal::service('path.current')->getPath();
      $path_args = explode('/', $current_path);
      $content_type = $path_args[3];
    }
    $suggestions[] = 'node_edit_form__' . $content_type;
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function cleanimal_theme_suggestions_container_alter(array &$suggestions, array $variables) {
  $element = $variables['element'];
  if (array_key_exists('#id', $element)) {
    $id = $element['#id'];

    // Structure actions inside a fieldset.
    if (strpos($id, 'edit-views-bulk-operations-bulk-form') !== FALSE) {
      $suggestions[] = 'container__edit_views_bulk';
    }
  }
}

/**
 * Implements hook_theme().
 */
function cleanimal_theme($existing, $type, $theme, $path) {
  return [
    'user_edit_form' => [
      'render element' => 'form',
    ],
  ];
}

/**
 * Implements hook_preprocess_html().
 */
function cleanimal_preprocess_html(&$variables) {
  // Get route.
  $route_name = \Drupal::routeMatch()->getRouteName();

  // Add route name as class.
  $variables['attributes']['class'][] = Html::cleanCssIdentifier(str_replace('.', '-', $route_name));

  // Add class for all node edit and add form pages.
  if ($route_name == 'node.add' || $route_name == 'entity.node.edit_form') {
    $variables['attributes']['class'][] = 'node-add-edit';
  }
}

/**
 * Implements hook_preprocess().
 */
function cleanimal_preprocess_block(&$variables) {
  // Add a class for identification to local_actions block.
  if ($variables['plugin_id'] === 'local_actions_block') {
    $variables['attributes']['class'][] = Html::getClass('block-' . $variables['plugin_id']);
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function cleanimal_form_user_form_alter(&$form, FormStateInterface $form_state) {
  $form['#theme'] = ['user_edit_form'];
  $form['#attributes']['class'][] = 'layout-node-form';
  $form['#attributes']['class'][] = 'clearfix';
}

/**
 * Implements theme_form_alter().
 */
function cleanimal_form_alter(&$form, &$form_state, $form_id) {
  // Add the scroll navigation to forms.
  // TODO: For what do we need the entity_id?
  //$entity = $form_state->getFormObject()->getEntity();
  if ($field_groups = $form["#fieldgroups"]) {
    if ($base_group = $field_groups['group_cleanimal_scrollnav']) {
      //$form['#attributes']['class'][] = 'node-edit-' . $entity->id();

      // TODO: Create a template for this.
      $scroll_navigation = '<ul>';

      for ($i = 0; $i < count($base_group->children); $i++) {
        $child = $field_groups[$base_group->children[$i]];
        // TODO: Disable id in backend config.
        $child_id = Html::getId($child->group_name);
        $field_groups[$base_group->children[$i]]->format_settings['id'] = $child_id;
        $field_groups[$base_group->children[$i]]->format_settings['classes'] .= ' scroll-nav-content';
        // TODO: Do we need this?
        $field_groups[$base_group->children[$i]]->format_settings['label_element_classes'] .= ' scroll-nav-link ' . $child_id;

        $scroll_navigation .= <<<EOT
      <li>
        <a href="#{$child_id}">
          {$child->label}
        </a>
      </li>
EOT;
      }

      $scroll_navigation .= '</ul>';

      $form['cleanimal_scroll_navigation']['#markup'] = $scroll_navigation;
      $form['#attached']['library'][] = 'cleanimal/scroll_navigation';
    }
  }
}

/**
 * Implements theme_preprocess_form_element().
 */
function cleanimal_preprocess_form_element(&$variables) {
  // TODO: Checkbox logic.
  $element = $variables['element'];
  if ($element["#type"] === 'checkbox') {
    // Add a class to the label if it should be shown.
    if ($variables['label_display'] === 'after') {
      $variables["label"]["#attributes"]['class'][] = 'show-label';
    }

    // Add a label if there is none.
    if (!$variables['label']['#title']) {
      $variables['label']['#title'] = t('label-element');
    }

    // Position the label after the checkbox.
    $variables['label_display'] = 'after';
    $variables["label"]["#title_display"] = 'after';
  }

  if ($element["#type"] === 'radio') {
    if ($variables['label_display'] === 'none') {
      $variables["label"]["#attributes"]['class'][] = 'hide-label';
    }

    // Add a label if there is none.
    if (!$variables['label']['#title']) {
      $variables['label']['#title'] = t('label-element');
    }

    // Position the label after the checkbox.
    $variables['label_display'] = 'after';
    $variables["label"]["#title_display"] = 'after';
  }
}
